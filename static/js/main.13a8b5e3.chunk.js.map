{"version":3,"sources":["components/Quote.js","components/QuotationsList.js","App.js","reportWebVitals.js","index.js"],"names":["Quote","className","this","props","quote","author","Component","QuotationsList","drawQuote","randomIndex","Math","floor","random","state","AllQuotes","length","randomQuote","setState","randomQuotes","currentQuote","currentIndex","previousQuote","curState","fetch","then","response","json","data","onClick","disabled","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAEqBA,E,4JACnB,WACE,OACE,sBAAKC,UAAU,kBAAf,UACE,4BACE,4BAAIC,KAAKC,MAAMC,UAEjB,4BAAIF,KAAKC,MAAME,gB,GAPYC,aCCdC,E,kDACnB,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IAeRK,UAAY,WACV,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,UAAUC,QAC9DC,EAAc,EAAKH,MAAMC,UAAUL,GACvC,EAAKQ,UAAS,SAACJ,GAAD,MAAY,CACxBK,aAAa,GAAD,mBAAML,EAAMK,cAAZ,CAA0BF,IACtCG,aAAcH,EACdI,aAAcP,EAAMO,aAAe,OAtBpB,EAyBnBC,cAAgB,WACd,IAAIA,EAAgB,EAAKR,MAAMK,aAAa,EAAKL,MAAMO,aAAe,GAEtE,EAAKH,UAAS,SAACK,GAAD,MAAe,CAC3BH,aAAcE,EACdD,aAAcE,EAASF,aAAe,OA5BxC,EAAKP,MAAQ,CACXC,UAAW,KACXI,aAAc,GACdC,aAAc,KACdC,cAAe,GANA,E,qDASnB,WAAqB,IAAD,OAClBG,MACE,yIAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKV,SAAS,CAAEH,UAAWa,S,oBAmB/C,WACE,OACE,gCACE,sBAAK1B,UAAU,OAAf,UACE,wBAAQ2B,QAAS1B,KAAKM,UAAtB,2BACCN,KAAKW,MAAMO,cAAgB,EAC1B,wBAAQS,UAAQ,EAAhB,6BAEA,wBAAQD,QAAS1B,KAAKmB,cAAtB,gCAGwB,MAA3BnB,KAAKW,MAAMM,aACV,cAAC,EAAD,CACEd,OAAQH,KAAKW,MAAMM,aAAad,OAChCD,MAAOF,KAAKW,MAAMM,aAAaf,QAGjC,cAAC,EAAD,W,GAnDkCE,aCQ7BwB,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.13a8b5e3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Quote extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"quote-container\">\r\n        <p>\r\n          <q>{this.props.quote}</q>\r\n        </p>\r\n        <p>{this.props.author}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Quote from \"./Quote\";\r\n\r\nexport default class QuotationsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      AllQuotes: null,\r\n      randomQuotes: [],\r\n      currentQuote: null,\r\n      currentIndex: -1,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\r\n      \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({ AllQuotes: data }));\r\n  }\r\n  drawQuote = () => {\r\n    let randomIndex = Math.floor(Math.random() * this.state.AllQuotes.length);\r\n    let randomQuote = this.state.AllQuotes[randomIndex];\r\n    this.setState((state) => ({\r\n      randomQuotes: [...state.randomQuotes, randomQuote],\r\n      currentQuote: randomQuote,\r\n      currentIndex: state.currentIndex + 1,\r\n    }));\r\n  };\r\n  previousQuote = () => {\r\n    let previousQuote = this.state.randomQuotes[this.state.currentIndex - 1];\r\n\r\n    this.setState((curState) => ({\r\n      currentQuote: previousQuote,\r\n      currentIndex: curState.currentIndex - 1,\r\n    }));\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"btns\">\r\n          <button onClick={this.drawQuote}>wylosuj cytat</button>\r\n          {this.state.currentIndex <= 0 ? (\r\n            <button disabled>poprzedni cytat</button>\r\n          ) : (\r\n            <button onClick={this.previousQuote}>poprzedni cytat</button>\r\n          )}\r\n        </div>\r\n        {this.state.currentQuote != null ? (\r\n          <Quote\r\n            author={this.state.currentQuote.author}\r\n            quote={this.state.currentQuote.quote}\r\n          />\r\n        ) : (\r\n          <Quote />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport QuotationsList from \"./components/QuotationsList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuotationsList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}